{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6z5YVNCz9mLL"
   },
   "source": [
    "# AIMET dependencies install & build\n",
    "The following group of cells installs the AIMET library for you. For more details, please see [this link](https://github.com/quic/aimet/blob/develop/packaging/google_colab_install.md).\n",
    "\n",
    "You can clone this notebook and use it in your own project. Make sure that before running these cells, you connect to a hosted environment with a GPU accelerator. (Runtime -> Change runtime -> Hardware Accelerator(GPU))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-Hz_C0-x_hbw"
   },
   "source": [
    "## Installing dependencies\n",
    "May prompt you.\n",
    "# Ignore first 4 code cells when running in docker!!!\n",
    "## Start from \"Train a model on MNIST data\" :)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "executionInfo": {
     "elapsed": 832825,
     "status": "ok",
     "timestamp": 1610296563283,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "xCMVKw4N9lYv",
    "outputId": "979c56ce-080f-4e3c-e056-9b77d6ad24e6"
   },
   "source": [
    "!pip3 uninstall --yes protobuf\n",
    "!pip3 uninstall --yes tensorflow\n",
    "!apt-get update\n",
    "!apt-get install python3.6\n",
    "!apt-get install python3-dev\n",
    "!apt-get install python3-pip\n",
    "!apt-get install liblapacke liblapacke-dev\n",
    "!apt-get install wget\n",
    "!pip3 install numpy==1.16.4\n",
    "!apt-get install libgtest-dev build-essential cmake\n",
    "!pip3 --no-cache-dir install opencv-python==4.1.0.25\n",
    "!pip3 --no-cache-dir install pillow==6.2.1\n",
    "!pip3 install pytorch-ignite==0.1.0\n",
    "!wget -q https://github.com/Itseez/opencv/archive/3.1.0.tar.gz -O /tmp/3.1.0.tar.gz > /dev/null\n",
    "!tar -C /tmp -xvf /tmp/3.1.0.tar.gz > /dev/null\n",
    "%cd /tmp/opencv-3.1.0\n",
    "%mkdir release\n",
    "%cd release\n",
    "!cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=release -DWITH_FFMPEG=OFF -DBUILD_TESTS=OFF -DWITH_CUDA=OFF -DBUILD_PERF_TESTS=OFF -DWITH_IPP=OFF -DENABLE_PRECOMPILED_HEADERS=OFF .. > /dev/null\n",
    "!make -j16 > /dev/null\n",
    "!make -j16 install > /dev/null\n",
    "!wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb\n",
    "!apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub\n",
    "!dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb\n",
    "!apt-get update\n",
    "!wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb\n",
    "!apt install ./nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb\n",
    "!apt-get update\n",
    "!apt install cuda-cublas-10-0 cuda-cufft-10-0 cuda-curand-10-0 cuda-cusolver-10-0\n",
    "!apt-get update && apt install cuda-cusparse-10-0 libcudnn7=7.6.2.24-1+cuda10.0 libnccl2=2.4.8-1+cuda10.0  cuda-command-line-tools-10.0\n",
    "!pip3 install scipy==1.1.0\n",
    "!pip3 install protobuf==3.7.1\n",
    "!pip3 install scikit-learn==0.19.1\n",
    "!pip3 install tb-nightly==1.14.0a20190517\n",
    "!pip3 install tensorboardX==1.7\n",
    "!pip3 install https://download.pytorch.org/whl/cu100/torch-1.4.0%2Bcu100-cp36-cp36m-linux_x86_64.whl\n",
    "!pip3 install https://download.pytorch.org/whl/cu100/torchvision-0.5.0%2Bcu100-cp36-cp36m-linux_x86_64.whl\n",
    "!pip3 install --upgrade pip\n",
    "!pip3 install tensorflow-gpu==1.15.0\n",
    "!pip3 install future==0.17.1\n",
    "!pip3 install tensorboard==1.14\n",
    "!pip3 install bokeh==1.2.0\n",
    "!pip3 install pandas==0.22.0\n",
    "!pip3 install holoviews==1.12.7\n",
    "!pip3 install --no-deps bokeh==1.2.0 hvplot==0.4.0\n",
    "!pip3 install jsonschema==3.1.1\n",
    "!pip3 install osqp onnx\n",
    "\n",
    "!ln -s /usr/local/cuda-10.0 /usr/local/cuda\n",
    "!apt-get update && apt-get install -y libjpeg8-dev\n",
    "!ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib\n",
    "\n",
    "!apt install zlib1g-dev\n",
    "\n",
    "!pip3 uninstall --yes Pillow && pip3 install Pillow-SIMD==6.0.0.post0\n",
    "!pip3 uninstall --yes pytest\n",
    "!pip3 install pytest\n",
    "!pip3 install setuptools==41.0.1\n",
    "!pip3 install keras==2.2.4\n",
    "\n",
    "%rm -rf /usr/local/bin/python\n",
    "!ln -s /usr/bin/python3 /usr/local/bin/python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PiiZL_wi_oeP"
   },
   "source": [
    "After installing the dependencies, you must restart the environment before proceeding. (Runtime -> Restart Runtime)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tdF9TK03CKiW"
   },
   "source": [
    "## AIMET build and installation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 115891,
     "status": "ok",
     "timestamp": 1610296813311,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "1nR1MrsI-EW1",
    "outputId": "03b22e94-4bbf-499e-c364-df5b131f2975",
    "scrolled": true
   },
   "source": [
    "%cd /content/\n",
    "!rm -rf aimet_code\n",
    "!mkdir aimet_code\n",
    "%cd aimet_code\n",
    "!git clone https://github.com/quic/aimet.git\n",
    "%cd aimet\n",
    "%mkdir -p ./ThirdParty/googletest\n",
    "%pushd ./ThirdParty/googletest\n",
    "!git clone https://github.com/google/googletest.git -b release-1.8.0 googletest-release-1.8.0\n",
    "%popd\n",
    "%cd /content/aimet_code\n",
    "%mkdir build\n",
    "%cd build\n",
    "!cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ../aimet\n",
    "!make -j 8\n",
    "!make install"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "U6qARmUzAZj4"
   },
   "source": [
    "## Setting up `PYTHONPATH` and `LD_LIBRARY_PATH`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "INEc0N5xAbuz"
   },
   "source": [
    "import sys\n",
    "\n",
    "sys.path.append(r'/content/aimet_code/build/staging/universal/lib/python')\n",
    "sys.path.append(r'/content/aimet_code/build/staging/universal/lib/x86_64-linux-gnu')\n",
    "sys.path.append(r'/usr/local/lib/python3.6/dist-packages')\n",
    "sys.path.append(r'/content/aimet_code/build/artifacts')\n",
    "\n",
    "import os\n",
    "\n",
    "os.environ['LD_LIBRARY_PATH']+= \":/content/aimet_code/build/artifacts\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2DiI-1hvAhd3"
   },
   "source": [
    "## Run unit tests\n",
    "If the installation went smoothly, all tests should pass."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 438596,
     "status": "ok",
     "timestamp": 1610297270113,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "WhO4FvxHAijc",
    "outputId": "fdf0203b-f52d-4e6f-f89f-722b155fcabf"
   },
   "source": [
    "%cd /content/aimet_code/build/\n",
    "!ctest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-ZJ8R7fCRx_f"
   },
   "source": [
    "# Train a model on MNIST data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "sXn0f41ueDFN"
   },
   "source": [
    "Set random seed for reprodubicility"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "executionInfo": {
     "elapsed": 970,
     "status": "ok",
     "timestamp": 1610306425865,
     "user": {
      "displayName": "Jelle",
      "photoUrl": "",
      "userId": "13664908576423573267"
     },
     "user_tz": -60
    },
    "id": "Y-GPWZa2eFS1"
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def display_grayscale(tensor):\n",
    "    plt.imshow(tensor, cmap='gray')\n",
    "    plt.show()\n",
    "\n",
    "def set_seed(seed=42):\n",
    "    torch.manual_seed(seed)\n",
    "    np.random.seed(seed)\n",
    "    torch.backends.cudnn.deterministic = True\n",
    "    torch.backends.cudnn.benchmark = False\n",
    "\n",
    "set_seed()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "U_zQ5VelR30T"
   },
   "source": [
    "Define a model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "executionInfo": {
     "elapsed": 1010,
     "status": "ok",
     "timestamp": 1610306428470,
     "user": {
      "displayName": "Jelle",
      "photoUrl": "",
      "userId": "13664908576423573267"
     },
     "user_tz": -60
    },
    "id": "z9-dFvJhRxsf"
   },
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "class LeNet5(torch.nn.Module):          \n",
    "\n",
    "    def __init__(self):     \n",
    "        super(LeNet5, self).__init__()\n",
    "        self.convs = nn.Sequential(nn.Conv2d(in_channels=1, out_channels=6, kernel_size=5, padding=2),\n",
    "                                    nn.ReLU(),\n",
    "                                    nn.MaxPool2d(kernel_size=2),\n",
    "                                    nn.Conv2d(in_channels=6, out_channels=16, kernel_size=5, padding=0),\n",
    "                                    nn.ReLU(),\n",
    "                                    nn.MaxPool2d(kernel_size=2)\n",
    "                                  )\n",
    "\n",
    "        self.linears = nn.Sequential(nn.Linear(16*5*5, 120),\n",
    "                                     nn.Linear(120, 84),\n",
    "                                     nn.Linear(84, 10)\n",
    "                                    )\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.convs(x)\n",
    "        x = x.flatten(start_dim=1)\n",
    "        x = self.linears(x)\n",
    "\n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define functions for creating imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torchvision.datasets import MNIST\n",
    "import torchvision.transforms\n",
    "\n",
    "class MNIST_Imbalancer:\n",
    "    ''' class around MNIST object for applying imbalance to its dataset '''\n",
    "    def __init__(self):\n",
    "        \n",
    "        # Convert imgs to tensor and normalize by mean and stddev of the training set\n",
    "        transformImg = torchvision.transforms.Compose([torchvision.transforms.ToTensor(),\n",
    "                                               torchvision.transforms.Normalize((0.1307,), (0.3081,))])\n",
    "        \n",
    "        \n",
    "        self.dataset = MNIST(root='./data', train=True, download=True, transform=transformImg)\n",
    "        self.class_order = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] #MNIST-specific\n",
    "        self.selection_dict = dict()\n",
    "        self.shuffle()\n",
    "    \n",
    "    \n",
    "    def shuffle(self):\n",
    "        ''' shuffle dataset '''\n",
    "        # generate random ordered indeces for dataset\n",
    "        datapoints = self.dataset.data.shape[0]\n",
    "        rand_idx = torch.randperm(datapoints)\n",
    "\n",
    "        # shuffle data and targets in the same way\n",
    "        self.dataset.data = self.dataset.data[rand_idx]\n",
    "        self.dataset.targets = self.dataset.targets[rand_idx]\n",
    "    \n",
    "    \n",
    "\n",
    "    def keep_selection(self, target, selection):\n",
    "        ''' create imbalance in single class of a dataset '''\n",
    "\n",
    "        # get indices of imgs of target number and remove selection of the indices\n",
    "        target_mask = self.dataset.targets == target\n",
    "        selection_idx = target_mask.nonzero()[round(len(target_mask.nonzero())*selection):]\n",
    "\n",
    "        # make mask wich selects all data except for indices in selection\n",
    "        selection_mask = np.ones(len(self.dataset.data), dtype=bool)\n",
    "        selection_mask[selection_idx] = False\n",
    "\n",
    "        # apply mask to remove the selected data\n",
    "        self.dataset.data = self.dataset.data[selection_mask]\n",
    "        self.dataset.targets = self.dataset.targets[selection_mask]\n",
    "\n",
    "    \n",
    "    \n",
    "    def apply_imbalance(self):\n",
    "        ''' create imbalance in dataset according to selection dict '''\n",
    "\n",
    "        # throw away a part of the data for each class\n",
    "        for class_number, selection in self.selection_dict.items():\n",
    "            self.keep_selection(class_number, selection)\n",
    "        \n",
    "        \n",
    "        \n",
    "    def linear_imbalance(self, rho, apply=True):\n",
    "        ''' create selection dict with linear imbalance '''\n",
    "        \n",
    "        min_examples = 1 / rho\n",
    "        \n",
    "        n_steps = len(self.class_order) - 1\n",
    "        linear_step = (1.0 - min_examples) / n_steps\n",
    "\n",
    "        # interpolate the classes between the minimum and maximum linearly\n",
    "        for i, data_class in enumerate(reversed(self.class_order)):\n",
    "            self.selection_dict[data_class] = min_examples + (i * linear_step)\n",
    "        \n",
    "        if apply:\n",
    "            self.apply_imbalance()\n",
    "\n",
    "        return self.selection_dict\n",
    "\n",
    "            \n",
    "            \n",
    "    def step_imbalance(self, rho, mu, apply=True):\n",
    "        ''' create selection dict with step imbalance '''\n",
    "        \n",
    "        min_examples = 1 / rho\n",
    "        \n",
    "        \n",
    "        n_classes = len(self.class_order)\n",
    "        step_index = int(mu * n_classes)\n",
    "\n",
    "        for i, data_class in enumerate(reversed(self.class_order)):\n",
    "            if i < step_index:\n",
    "                self.selection_dict[data_class] = min_examples\n",
    "            else:\n",
    "                self.selection_dict[data_class] = 1.0\n",
    "\n",
    "        if apply:\n",
    "            self.apply_imbalance()\n",
    "            \n",
    "        return self.selection_dict\n",
    "\n",
    "\n",
    "            \n",
    "            \n",
    "    def long_tailed_imbalance(self, mu, apply=True):\n",
    "        ''' create selection dict with long-tailed imbalance'''\n",
    "        \n",
    "        max_index = len(self.class_order) - 1\n",
    "        \n",
    "        # set selection for each class according to long-tailed function, mu is in (0,1)\n",
    "        for i, data_class in enumerate(self.class_order):\n",
    "            self.selection_dict[data_class] = mu**i\n",
    "\n",
    "        if apply:\n",
    "            self.apply_imbalance()\n",
    "        \n",
    "        return self.selection_dict\n",
    "    \n",
    "    \n",
    "    \n",
    "    def plot(self, title, color='r'):\n",
    "        ''' plot the imbalance created by an imbalance function '''\n",
    "        \n",
    "        plt.bar(self.selection_dict.keys(), self.selection_dict.values(), color=color)\n",
    "        plt.title(title)\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define Dataloaders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 484,
     "referenced_widgets": [
      "2328a7b009d44c5e9eacff2a755cbebb",
      "ed9207ce942047e9ae6072508f523741",
      "46c25a22208a49eda4e6eab32d4eaf2f",
      "d4ff65d7c61d4bf9b73c03e29c28a8ad",
      "2a5ab588d2f24b0ab3ec8ce388f5127f",
      "a5f8150fe3124fc88dc714b404006f34",
      "8da6d53cc36743e6bd5058b8840e0c41",
      "f6769ba59c21406e8c259661bdbf68f1",
      "4b07de9e194f4439baeae01257e4ba52",
      "bd10cc47f292451d922d8980f5e93ddf",
      "7989862673284a799c9d51e431373247",
      "154e97cc69984a0ab11ced26576ebbd7",
      "5503b3b0dbb548589aaa0279b976a414",
      "efa8ccf950004549a00250f6332bc16b",
      "c41636ad0caf4621870bd12e89518604",
      "ab3eb90c487746e8b65e62d7757c0e78",
      "af3a484183a24008a6d38960f73ffb3e",
      "ac82f07b477b4502b21ebaa8a539c4a3",
      "012c3c9adc694baba6feb904d60f9201",
      "8ce0005792b74005a30cb426b5c8077a",
      "0b0a62dffc4341069d860e1e7c09a85c",
      "3b5ccd5354b040b58f645351f4d950f3",
      "543c9bdec83f486eaa8b9b2b58ef211a",
      "9fffcd6e9d7a449fb4bfccedc6cb70a1",
      "df98becb207b42f2bbeaf23708e5be02",
      "15b6b7d213c94345b6dedf59e8e065dc",
      "6126bcc00c54407688d7d3a081fa43c0",
      "15c6e5135ed849bc89dec5bf0a38363b",
      "657579abb9c4488c8f1a810a679dfda9",
      "1af67330e5d947718a1e80e982898052",
      "c9dc0f6d46b74558bcb4962e3f1fb489",
      "ab99643118ed466298c1ea12d4ac53d9"
     ]
    },
    "executionInfo": {
     "elapsed": 2453,
     "status": "ok",
     "timestamp": 1610306438151,
     "user": {
      "displayName": "Jelle",
      "photoUrl": "",
      "userId": "13664908576423573267"
     },
     "user_tz": -60
    },
    "id": "kH5o32FLVJ2D",
    "outputId": "49acbac6-c0ea-4f76-b479-d7bf33ecacfb"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# Convert imgs to tensor and normalize by mean and stddev of the training set\n",
    "transformImg = torchvision.transforms.Compose([torchvision.transforms.ToTensor(),\n",
    "                                               torchvision.transforms.Normalize((0.1307,), (0.3081,))])\n",
    "\n",
    "test = MNIST(root='./data', train=False, download=True, transform=transformImg)\n",
    "\n",
    "\n",
    "train_imbalance = MNIST_Imbalancer()\n",
    "\n",
    "train_imbalance.linear_imbalance(5, apply=False)\n",
    "train_imbalance.plot(\"Linear Imbalance\")\n",
    "\n",
    "train_imbalance.step_imbalance(4, 0.5, apply=False)\n",
    "train_imbalance.plot(\"Step Imbalance\")\n",
    "\n",
    "train_imbalance.long_tailed_imbalance(0.7)\n",
    "train_imbalance.plot(\"Long-Tailed Imbalance\")\n",
    "\n",
    "train = train_imbalance.dataset\n",
    "\n",
    "# Define train/test loaders\n",
    "train_loader = DataLoader(train, batch_size=128, num_workers=4, shuffle=True, pin_memory=True)\n",
    "test_loader = DataLoader(train, batch_size=1024, num_workers=4, shuffle=False, pin_memory=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 484,
     "referenced_widgets": [
      "2328a7b009d44c5e9eacff2a755cbebb",
      "ed9207ce942047e9ae6072508f523741",
      "46c25a22208a49eda4e6eab32d4eaf2f",
      "d4ff65d7c61d4bf9b73c03e29c28a8ad",
      "2a5ab588d2f24b0ab3ec8ce388f5127f",
      "a5f8150fe3124fc88dc714b404006f34",
      "8da6d53cc36743e6bd5058b8840e0c41",
      "f6769ba59c21406e8c259661bdbf68f1",
      "4b07de9e194f4439baeae01257e4ba52",
      "bd10cc47f292451d922d8980f5e93ddf",
      "7989862673284a799c9d51e431373247",
      "154e97cc69984a0ab11ced26576ebbd7",
      "5503b3b0dbb548589aaa0279b976a414",
      "efa8ccf950004549a00250f6332bc16b",
      "c41636ad0caf4621870bd12e89518604",
      "ab3eb90c487746e8b65e62d7757c0e78",
      "af3a484183a24008a6d38960f73ffb3e",
      "ac82f07b477b4502b21ebaa8a539c4a3",
      "012c3c9adc694baba6feb904d60f9201",
      "8ce0005792b74005a30cb426b5c8077a",
      "0b0a62dffc4341069d860e1e7c09a85c",
      "3b5ccd5354b040b58f645351f4d950f3",
      "543c9bdec83f486eaa8b9b2b58ef211a",
      "9fffcd6e9d7a449fb4bfccedc6cb70a1",
      "df98becb207b42f2bbeaf23708e5be02",
      "15b6b7d213c94345b6dedf59e8e065dc",
      "6126bcc00c54407688d7d3a081fa43c0",
      "15c6e5135ed849bc89dec5bf0a38363b",
      "657579abb9c4488c8f1a810a679dfda9",
      "1af67330e5d947718a1e80e982898052",
      "c9dc0f6d46b74558bcb4962e3f1fb489",
      "ab99643118ed466298c1ea12d4ac53d9"
     ]
    },
    "executionInfo": {
     "elapsed": 2453,
     "status": "ok",
     "timestamp": 1610306438151,
     "user": {
      "displayName": "Jelle",
      "photoUrl": "",
      "userId": "13664908576423573267"
     },
     "user_tz": -60
    },
    "id": "kH5o32FLVJ2D",
    "outputId": "49acbac6-c0ea-4f76-b479-d7bf33ecacfb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Compose(\n",
      "    ToTensor()\n",
      "    Normalize(mean=(0.1307,), std=(0.3081,))\n",
      ")\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "<<<<<<< REMOTE CELL DELETED >>>>>>>\n",
    "import torchvision.transforms\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision.datasets import MNIST\n",
    "\n",
    "# Convert imgs to tensor and normalize by mean and stddev of the training set\n",
    "transformImg = torchvision.transforms.Compose([torchvision.transforms.ToTensor(),\n",
    "                                               torchvision.transforms.Normalize((0.1307,), (0.3081,))])\n",
    "print(transformImg)\n",
    "\n",
    "train = MNIST(root='./data', train=True, download=True, transform=transformImg)\n",
    "test = MNIST(root='./data', train=False, download=True, transform=transformImg)\n",
    "\n",
    "MNIST_classes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
    "\n",
    "linear_dict = linear_imbalance(train, MNIST_classes, 0.5)\n",
    "\n",
    "plt.bar(linear_dict.keys(), linear_dict.values(), color='g')\n",
    "plt.title('Linear Imbalance')\n",
    "plt.show()\n",
    "\n",
    "step_dict = step_imbalance(train, MNIST_classes, 0.3, 0.5)\n",
    "\n",
    "plt.bar(step_dict.keys(), step_dict.values(), color='r')\n",
    "plt.title('Step Imbalance')\n",
    "plt.show()\n",
    "\n",
    "long_tailed_dict = long_tailed_imbalance(train, MNIST_classes, 0.7)\n",
    "\n",
    "plt.bar(long_tailed_dict.keys(), long_tailed_dict.values(), color='b')\n",
    "plt.title('Long_tailed Imbalance')\n",
    "plt.show()\n",
    "\n",
    "MNIST_selection_dict = {0: .1, 1: .2, 2: .3, 3: .4, 4: .5, 5: .6, 6: .7, 7: .8, 8: .9, 9: 1.}\n",
    "\n",
    "\n",
    "# Define train/test loaders\n",
    "train_loader = DataLoader(train, batch_size=128, num_workers=4, shuffle=True, pin_memory=True)\n",
    "test_loader = DataLoader(train, batch_size=1024, num_workers=4, shuffle=False, pin_memory=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6iRixegDe7Ot"
   },
   "source": [
    "Define functions for conducting the training and testing epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "executionInfo": {
     "elapsed": 1003,
     "status": "ok",
     "timestamp": 1610306455425,
     "user": {
      "displayName": "Jelle",
      "photoUrl": "",
      "userId": "13664908576423573267"
     },
     "user_tz": -60
    },
    "id": "BgDcuZVhe9C4"
   },
   "outputs": [],
   "source": [
    "def accuracy(out, y):\n",
    "    preds = out.argmax(dim=1, keepdim=True).squeeze()\n",
    "    correct = preds.eq(y).sum().item()\n",
    "    return correct\n",
    "\n",
    "def train_epoch(model, opt, train_loader, criterion, device):\n",
    "    model.train()\n",
    "    epoch_loss = 0\n",
    "    epoch_acc = 0\n",
    "    n_samples = 0\n",
    "    for x,y in train_loader:\n",
    "        opt.zero_grad()\n",
    "\n",
    "        x, y = x.to(device), y.to(device)\n",
    "        out = model.forward(x)\n",
    "        loss = criterion(out, y)\n",
    "\n",
    "        epoch_acc += accuracy(out, y)\n",
    "        epoch_loss += loss.item()\n",
    "        n_samples += x.size(0)\n",
    "\n",
    "        loss.backward()\n",
    "        opt.step()\n",
    "\n",
    "    epoch_acc = epoch_acc / n_samples\n",
    "    epoch_loss = epoch_loss / n_samples\n",
    "\n",
    "    return epoch_acc, epoch_loss\n",
    "\n",
    "\n",
    "\n",
    "def test_epoch(model, test_loader, criterion, device):\n",
    "    model.eval()\n",
    "    epoch_loss = 0\n",
    "    epoch_acc = 0\n",
    "    n_samples = 0\n",
    "    with torch.no_grad():\n",
    "        for x,y in test_loader:\n",
    "            x, y = x.to(device), y.to(device)\n",
    "            out = model.forward(x)\n",
    "            loss = criterion(out, y)\n",
    "\n",
    "            epoch_acc += accuracy(out, y)\n",
    "            epoch_loss += loss.item()\n",
    "            n_samples += x.size(0)\n",
    "\n",
    "    epoch_acc = epoch_acc / n_samples\n",
    "    epoch_loss = epoch_loss / n_samples\n",
    "\n",
    "    return epoch_acc, epoch_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7w97dpw3dyde"
   },
   "source": [
    "Instantiate required objects and train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "D28i0tp6VqTZ"
   },
   "outputs": [],
   "source": [
    "import torch.optim as optim\n",
    "import numpy as np\n",
    "from torch.utils.tensorboard import SummaryWriter\n",
    "\n",
    "# to use for weighted loss functions, values should be according to imbalance\n",
    "weights = torch.FloatTensor([1,1,1,1,1,1,2,1,1,2])\n",
    "\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
    "n_epochs = 10\n",
    "writer = SummaryWriter()\n",
    "model = LeNet5().to(device)\n",
    "opt = optim.SGD(model.parameters(), lr=1e-2)\n",
    "\n",
    "# Train+test, log to tensorboard\n",
    "# It's recommended to also print all the scalar values\n",
    "for i in range(n_epochs):\n",
    "    train_acc, train_loss = train_epoch(model, opt, train_loader, criterion, device)\n",
    "    test_acc, test_loss = test_epoch(model, test_loader, criterion, device)\n",
    "    writer.add_scalar('train/acc', train_acc, i+1)\n",
    "    writer.add_scalar('train/loss', train_loss, i+1)\n",
    "    writer.add_scalar('test/acc', test_acc, i+1)\n",
    "    writer.add_scalar('test/loss', test_loss, i+1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pW_XJaFxlWFk"
   },
   "source": [
    "Let's check out how the model did with tensorboard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 425
    },
    "executionInfo": {
     "elapsed": 5154,
     "status": "ok",
     "timestamp": 1610307800543,
     "user": {
      "displayName": "Jelle",
      "photoUrl": "",
      "userId": "13664908576423573267"
     },
     "user_tz": -60
    },
    "id": "A3fkVkHYfMi9",
    "outputId": "9088161d-a432-4182-ff53-81f7fbd8454a"
   },
   "outputs": [],
   "source": [
    "%reload_ext tensorboard\n",
    "!pip3 install tensorboard-plugin-wit\n",
    "%tensorboard --logdir ./runs "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9p7dzY73mfBQ"
   },
   "source": [
    "# Do channel pruning with AIMET"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SFFOWmSmmh0H"
   },
   "source": [
    "Import necessary stuff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "executionInfo": {
     "elapsed": 4679,
     "status": "ok",
     "timestamp": 1610297563542,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "mE-CvbnmmhMl",
    "outputId": "0fae64dd-1031-4c55-c2d1-63293f2e3ed6"
   },
   "outputs": [],
   "source": [
    "from aimet_common.defs import CostMetric, CompressionScheme, GreedySelectionParameters\n",
    "from aimet_torch.defs import ChannelPruningParameters\n",
    "from aimet_torch.compress import ModelCompressor\n",
    "from aimet_torch.onnx_utils import OnnxSaver\n",
    "from decimal import Decimal\n",
    "\n",
    "# Model compressor needs an evaluation function with this specific signature\n",
    "def eval_callback(model, iterations, use_cuda=True):\n",
    "    model.eval()\n",
    "    epoch_acc = 0\n",
    "    n_samples = 0\n",
    "    with torch.no_grad():\n",
    "        for idx,(x,y) in enumerate(test_loader):\n",
    "            if use_cuda:\n",
    "                x, y = x.to('cuda:0'), y.to('cuda:0')\n",
    "\n",
    "            out = model.forward(x)\n",
    "            epoch_acc += accuracy(out, y)\n",
    "            n_samples += x.size(0)\n",
    "\n",
    "            if iterations is not None:\n",
    "                if idx == iterations:\n",
    "                    break\n",
    "        epoch_acc = epoch_acc / n_samples\n",
    "\n",
    "    return epoch_acc\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "bCSBR_ByrT4z"
   },
   "source": [
    "Do the actual pruning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 83306,
     "status": "ok",
     "timestamp": 1610297656200,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "N75lsRaAmna1",
    "outputId": "c3ff1dcd-ae7c-4b05-888b-01ff888a993f"
   },
   "outputs": [],
   "source": [
    "greedy_params = GreedySelectionParameters(target_comp_ratio=Decimal(0.5))\n",
    "# Exclude first layer from pruning\n",
    "modules_to_ignore = [model.convs[0]]\n",
    "auto_params = ChannelPruningParameters.AutoModeParams(greedy_params, modules_to_ignore)\n",
    "input_shape = (1, 1, 28, 28)\n",
    "channel_pruning_parameters = ChannelPruningParameters(mode=ChannelPruningParameters.Mode.auto,\n",
    "                                                      params=auto_params,\n",
    "                                                      data_loader=train_loader,\n",
    "                                                      num_reconstruction_samples=1024,\n",
    "                                                      allow_custom_downsample_ops=False,\n",
    "                                                    #   multiplicity=8\n",
    "                                                      )\n",
    "\n",
    "# This takes a bit\n",
    "comp_model_prun, stats_prun = ModelCompressor.compress_model(model,\n",
    "                                                   input_shape=input_shape,\n",
    "                                                   eval_callback=eval_callback,\n",
    "                                                   eval_iterations=None,\n",
    "                                                   compress_scheme=CompressionScheme.channel_pruning,\n",
    "                                                   cost_metric=CostMetric.mac,\n",
    "                                                   parameters=channel_pruning_parameters,\n",
    "                                                   )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WocMph_0o1Iw"
   },
   "source": [
    "Let's look at the two models. Can you see that `comp_model` has some missing channels in the convolutional layers?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 985,
     "status": "ok",
     "timestamp": 1610297665468,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "HW_7U8RUnwUe",
    "outputId": "6ec98696-025f-4b00-ea47-5bc1467b558f"
   },
   "outputs": [],
   "source": [
    "print(stats_prun)\n",
    "print('-'*10 + ' Original model ' + '-'*10)\n",
    "print(model)\n",
    "print('-'*10 + ' Compressed model ' + '-'*10)\n",
    "print(comp_model_prun)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nY1XFsmrpE2Y"
   },
   "source": [
    "Now let's see how they compare in terms of speed.\n",
    "Differences probably won't be huge here since the network is quite small to begin with, and only a single layer is pruned, but the point is to see that the compressed one is faster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 55985,
     "status": "ok",
     "timestamp": 1610297835445,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "Kb83uXumopad",
    "outputId": "fe194811-5adc-410a-c261-687638c883e7"
   },
   "outputs": [],
   "source": [
    "%timeit acc_full = eval_callback(model, None, use_cuda=True)\n",
    "%timeit acc_comp = eval_callback(comp_model_prun, None, use_cuda=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DSJJNo9VeXJV"
   },
   "source": [
    "# Noa's try at Spatial SVD with AIMET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 141074,
     "status": "ok",
     "timestamp": 1610298010127,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "zpzXKE-UeNUd",
    "outputId": "5b264c06-3e9e-4fac-821d-8bc89182c6e6"
   },
   "outputs": [],
   "source": [
    "# Import the needed package\n",
    "from aimet_torch.defs import SpatialSvdParameters\n",
    "greedy_params = GreedySelectionParameters(target_comp_ratio=Decimal(0.5))\n",
    "# Do not exclude anything in contrary to channel pruning\n",
    "modules_to_ignore = []\n",
    "auto_params = SpatialSvdParameters.AutoModeParams(greedy_params, modules_to_ignore)\n",
    "input_shape = (1, 1, 28, 28)\n",
    "# Delete all the parameters that don't give an error in channel pruning, but do here\n",
    "spatial_svd_params = SpatialSvdParameters(mode=SpatialSvdParameters.Mode.auto,\n",
    "                                                      params=auto_params)\n",
    "\n",
    "# This takes a bit\n",
    "comp_model_svd, stats_svd = ModelCompressor.compress_model(model,\n",
    "                                                   input_shape=input_shape,\n",
    "                                                   eval_callback=eval_callback,\n",
    "                                                   eval_iterations=None,\n",
    "                                                   compress_scheme=CompressionScheme.spatial_svd,\n",
    "                                                   cost_metric=CostMetric.mac,\n",
    "                                                   parameters=spatial_svd_params,\n",
    "                                                   )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6u_PdEczhLN9"
   },
   "source": [
    "Look at the two models, but now compare it to the Spatial SVD one. You can see that the convolutional layers are split in two. What kind of effect this specificaly has, isn't clear yet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1345,
     "status": "ok",
     "timestamp": 1610298036084,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "LzCGSsYnhH2W",
    "outputId": "14ce1e8f-98fb-4bd3-d293-90a715b38075"
   },
   "outputs": [],
   "source": [
    "print(stats_svd)\n",
    "print('-'*10 + ' Original model ' + '-'*10)\n",
    "print(model)\n",
    "print('-'*10 + ' Compressed model ' + '-'*10)\n",
    "print(comp_model_svd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iUhBcSsTiPp9"
   },
   "source": [
    "Compare the speed difference between original model and this new compressed model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 57089,
     "status": "ok",
     "timestamp": 1610298249390,
     "user": {
      "displayName": "Jasper Mulder",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GifrN-KID4f3Eu2i34s6o2boCZLCNEhKDJt_6esOw=s64",
      "userId": "07619433414547634568"
     },
     "user_tz": -60
    },
    "id": "9WuuBXMBiT7Q",
    "outputId": "d452bd0e-3bb0-4594-b947-08c956a19b11"
   },
   "outputs": [],
   "source": [
    "%timeit acc_full = eval_callback(model, None, use_cuda=True)\n",
    "%timeit acc_comp = eval_callback(comp_model_svd, None, use_cuda=True)"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "our_aimet_ready.ipynb",
   "provenance": [
    {
     "file_id": "1IOgTNChF3Gmc_zEfY-3DpxcbeSCDxaUd",
     "timestamp": 1609924035770
    },
    {
     "file_id": "1_U4qdGKGRxnjczFdBOrN1O6AbisFxFTc",
     "timestamp": 1607621041273
    }
   ]
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "012c3c9adc694baba6feb904d60f9201": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_3b5ccd5354b040b58f645351f4d950f3",
      "max": 1,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_0b0a62dffc4341069d860e1e7c09a85c",
      "value": 1
     }
    },
    "0b0a62dffc4341069d860e1e7c09a85c": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": "initial"
     }
    },
    "154e97cc69984a0ab11ced26576ebbd7": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_ab3eb90c487746e8b65e62d7757c0e78",
      "placeholder": "​",
      "style": "IPY_MODEL_c41636ad0caf4621870bd12e89518604",
      "value": " 32768/? [00:00&lt;00:00, 96064.27it/s]"
     }
    },
    "15b6b7d213c94345b6dedf59e8e065dc": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "15c6e5135ed849bc89dec5bf0a38363b": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_ab99643118ed466298c1ea12d4ac53d9",
      "placeholder": "​",
      "style": "IPY_MODEL_c9dc0f6d46b74558bcb4962e3f1fb489",
      "value": " 0/? [00:00&lt;?, ?it/s]"
     }
    },
    "1af67330e5d947718a1e80e982898052": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "2328a7b009d44c5e9eacff2a755cbebb": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_46c25a22208a49eda4e6eab32d4eaf2f",
       "IPY_MODEL_d4ff65d7c61d4bf9b73c03e29c28a8ad"
      ],
      "layout": "IPY_MODEL_ed9207ce942047e9ae6072508f523741"
     }
    },
    "2a5ab588d2f24b0ab3ec8ce388f5127f": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": "initial"
     }
    },
    "3b5ccd5354b040b58f645351f4d950f3": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "46c25a22208a49eda4e6eab32d4eaf2f": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "info",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_a5f8150fe3124fc88dc714b404006f34",
      "max": 1,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_2a5ab588d2f24b0ab3ec8ce388f5127f",
      "value": 1
     }
    },
    "4b07de9e194f4439baeae01257e4ba52": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_7989862673284a799c9d51e431373247",
       "IPY_MODEL_154e97cc69984a0ab11ced26576ebbd7"
      ],
      "layout": "IPY_MODEL_bd10cc47f292451d922d8980f5e93ddf"
     }
    },
    "543c9bdec83f486eaa8b9b2b58ef211a": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "5503b3b0dbb548589aaa0279b976a414": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": "initial"
     }
    },
    "6126bcc00c54407688d7d3a081fa43c0": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "info",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_1af67330e5d947718a1e80e982898052",
      "max": 1,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_657579abb9c4488c8f1a810a679dfda9",
      "value": 0
     }
    },
    "657579abb9c4488c8f1a810a679dfda9": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": "initial"
     }
    },
    "7989862673284a799c9d51e431373247": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_efa8ccf950004549a00250f6332bc16b",
      "max": 1,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_5503b3b0dbb548589aaa0279b976a414",
      "value": 1
     }
    },
    "8ce0005792b74005a30cb426b5c8077a": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_9fffcd6e9d7a449fb4bfccedc6cb70a1",
      "placeholder": "​",
      "style": "IPY_MODEL_543c9bdec83f486eaa8b9b2b58ef211a",
      "value": " 1654784/? [00:00&lt;00:00, 6376640.54it/s]"
     }
    },
    "8da6d53cc36743e6bd5058b8840e0c41": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "9fffcd6e9d7a449fb4bfccedc6cb70a1": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "a5f8150fe3124fc88dc714b404006f34": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "ab3eb90c487746e8b65e62d7757c0e78": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "ab99643118ed466298c1ea12d4ac53d9": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "ac82f07b477b4502b21ebaa8a539c4a3": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "af3a484183a24008a6d38960f73ffb3e": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_012c3c9adc694baba6feb904d60f9201",
       "IPY_MODEL_8ce0005792b74005a30cb426b5c8077a"
      ],
      "layout": "IPY_MODEL_ac82f07b477b4502b21ebaa8a539c4a3"
     }
    },
    "bd10cc47f292451d922d8980f5e93ddf": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "c41636ad0caf4621870bd12e89518604": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "c9dc0f6d46b74558bcb4962e3f1fb489": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "d4ff65d7c61d4bf9b73c03e29c28a8ad": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_f6769ba59c21406e8c259661bdbf68f1",
      "placeholder": "​",
      "style": "IPY_MODEL_8da6d53cc36743e6bd5058b8840e0c41",
      "value": " 9920512/? [00:20&lt;00:00, 27818522.57it/s]"
     }
    },
    "df98becb207b42f2bbeaf23708e5be02": {
     "model_module": "@jupyter-widgets/controls",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_6126bcc00c54407688d7d3a081fa43c0",
       "IPY_MODEL_15c6e5135ed849bc89dec5bf0a38363b"
      ],
      "layout": "IPY_MODEL_15b6b7d213c94345b6dedf59e8e065dc"
     }
    },
    "ed9207ce942047e9ae6072508f523741": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "efa8ccf950004549a00250f6332bc16b": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "f6769ba59c21406e8c259661bdbf68f1": {
     "model_module": "@jupyter-widgets/base",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
